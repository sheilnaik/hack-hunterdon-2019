
# ---------------------- Helpers That Build the Responses ----------------------

def build_speechlet_response(output, should_end_session):
    """ Return a speech output after an Alexa function is executed.

    Builds a simple speech response after the user invokes a particular Alexa
    function. The response used here is a simple, plain text response but can be
    enhanced by customizing the card that shows to users that have graphical displays
    (like the Echo Show or the Alexa app). See 
    https://developer.amazon.com/docs/custom-skills/include-a-card-in-your-skills-response.html
    for more details about customizing the response.

    You can also specify whether the session should be ended after this response is heard,
    or whether Alexa should prompt for another input from the user using the should_end_session
    parameter.

    Args:
        output: A string that Alexa will read to the user as the output.
        should_end_session: True if the session should end after hearing this response.
                            False if the session should say open for another input from
                                  the user.

    Returns:
        Dictionary containing the output speech and whether or not the session should end.
    """

	return {
		'outputSpeech': {
			'type': 'PlainText',
			'text': output
		},
		'shouldEndSession': should_end_session
	}


def build_response(session_attributes, speechlet_response):
    """ Build the actual response needed by Alexa.

    In addition to the speech output generated by build_speechlet_response(),
    Alexa requires an additional session_attributes dictionary that contains any
    information about the user's current session that needs to be "remembered"
    throughout the session. This function builds that full response.

    Args:
        session_attributes: A dictionary containing any attributes that need to be
                            "remembered" throughout the session.
        speechlet_response: The actual speech that Alexa will say as the output.
                            This is typically generated by the build_speechlet_response()
                            function.

    Returns:
        Dictionary containing the full response (attributes & speech) needed by Alexa.
    """

	return {
		'version': '1.0',
		'sessionAttributes': session_attributes,
		'response': speechlet_response
	}

# ------------------------------------------------------------------------------


# --------------------------- General Alexa Responses --------------------------

def get_welcome_response():
    """ Build the Alexa welcome response heard when the user invokes the skill with
        "Alexa, Launch Tutorial".

    Returns:
        Dictionary containing the welcome response
    """

	session_attributes = {}
	card_title = "Hi!"
	speech_output = "Hello and welcome to this Alexa tutorial! To get started, say 'My name is' and then your name!"
	reprompt_text = None
	should_end_session = True
	return build_response(session_attributes, build_speechlet_response(speech_output, should_end_session))


def get_help_response():
    """ Build the Alexa help response heard when the user asks for help at any point.

    Returns:
        Dictionary containing the help response
    """
    session_attributes = {}

    speech_output = "This skill listens for your first name, and then says Hello! To get started, say 'My name is' and then your name!"
    reprompt_text = None
    should_end_session = False
    return build_response(session_attributes, build_speechlet_response(speech_output, should_end_session))


def handle_session_end_request():
    """ Build the Alexa response heard when the user ends the skill with "Alexa, stop".

    Returns:
        Dictionary containing the response heard when the user ends the skill
    """

	card_title = "Goodbye!"
	speech_output = "Goodbye! Have a great day!" 
	should_end_session = True
	return build_response({}, build_speechlet_response(speech_output, should_end_session))


def hello_name(intent, session):
    """ Repeat the user's name back to them.

    Note that this intent utilizes a slot by looking for a value within the 'slots' key in the
    intent dictionary. It stores that value as a variable called first_name, which it then uses
    to repeat the user's first name back to them.

    Args:
        intent: Dictionary containing the intent name ("HelloName") and other data.
        session: Dictionary containing data related to the current session

    Returns:
        Alexa response with speech indicating the user's name.
    """

	session_attributes = {}
	first_name = intent['slots']['first_name']['value']
	reprompt_text = None
	speech_output = 'Hello {name}! Nice to meet you!'.format(name=first_name)
	should_end_session = True
	return build_response(session_attributes, build_speechlet_response(speech_output, should_end_session))

# ------------------------------------------------------------------------------

	
# -------------------------------- Alexa Intents -------------------------------

def on_intent(intent_request, session):
    """ Decide which function to run based on the intent triggered by the user's input.

    Currently, this skill only has one skill-specific function: "Hello Name",
    triggered by the intent named "HelloName".

    Note: The launch intent (triggered when the user says "Alexa, launch Tutorial" is
          found in the on_launch() function.)

    Args:
        intent_request: Dictionary containing data about the intent triggered by the user's
                        input.
        session: Dictionary containing data related to the current session

    Returns:
        The function that should run based on the intent triggered by the user's input.
    """

	print("on_intent requestId=" + intent_request['requestId'] + ", sessionId=" + session['sessionId'])
	intent = intent_request['intent']
	intent_name = intent_request['intent']['name']

	if intent_name == "HelloName":
		return hello_name(intent, session)
	elif intent_name == "AMAZON.HelpIntent":
		return get_help_response()
	elif intent_name == "AMAZON.CancelIntent" or intent_name == "AMAZON.StopIntent":
		return handle_session_end_request()
	else:
		raise ValueError("Invalid intent")


# ------------------------------------------------------------------------------


# ------------------------------ Generic Events --------------------------------

def on_session_started(session_started_request, session):
    """ Print data about the session when it begins (for logging). """

	print("on_session_started requestId=" + session_started_request['requestId']+ ", sessionId=" + session['sessionId'])


def on_launch(launch_request, session):
    """ Print data about the session when the skill launches (for logging) 
        and launch the welcome response.
    """

	print("on_launch requestId=" + launch_request['requestId'] + ", sessionId=" + session['sessionId'])
	return get_welcome_response()
	

def on_session_ended(session_ended_request, session):
    """ Print data about the session when it ends (for logging). """
	print("on_session_ended requestId=" + session_ended_request['requestId'] + ", sessionId=" + session['sessionId'])

# ------------------------------------------------------------------------------


# ------------------------------- Main Handler ---------------------------------

def lambda_handler(event, context):
    """This required function launches other related functions based on 
    the type of event incurred.
    """

	print("event.session.application.applicationId=" + event['session']['application']['applicationId'])
	
	if event['session']['new']:
		on_session_started({'requestId': event['request']['requestId']}, event['session'])
	if event['request']['type'] == "LaunchRequest":
		return on_launch(event['request'], event['session'])
	elif event['request']['type'] == "IntentRequest":
		return on_intent(event['request'], event['session'])
	elif event['request']['type'] == "SessionEndedRequest":
		return on_session_ended(event['request'], event['session'])

# ------------------------------------------------------------------------------